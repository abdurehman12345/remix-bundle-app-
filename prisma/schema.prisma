generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AdminConfig {
  id              String   @id @default("app-admin")
  appUrl          String?
  webhooksVersion String?
  appHandle       String?
  whatsappNumber  String?
  email           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
}

model Bundle {
  id                      String             @id
  bundleId                String?            @unique
  shop                    String
  title                   String
  description             String?
  imageUrl                String?
  collectionId            String?
  pricingType             Bundle_pricingType @default(SUM)
  priceValueCents         Int?
  minItems                Int?
  maxItems                Int?
  startAt                 DateTime?
  endAt                   DateTime?
  allowMessage            Boolean            @default(false)
  allowCardUpload         Boolean            @default(false)
  messageCharLimit        Int?
  personalizationFeeCents Int?
  wrapRequired            Boolean            @default(false)
  status                  Bundle_status      @default(DRAFT)
  type                    Bundle_type        @default(FIXED)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime
  BundleCard              BundleCard[]
  BundleCollection        BundleCollection[]
  BundleGlobalWrap        BundleGlobalWrap[]
  BundleProduct           BundleProduct[]
  BundleTierPrice         BundleTierPrice[]
  WrappingOption          WrappingOption[]
}

model BundleCard {
  id               String   @id
  bundleId         String
  name             String
  imageUrl         String
  priceCents       Int?
  shopifyProductId String?
  shopifyVariantId String?
  createdAt        DateTime @default(now())
  Bundle           Bundle   @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@index([bundleId], map: "BundleCard_bundleId_fkey")
}

model BundleCollection {
  id            String @id
  bundleId      String
  collectionGid String
  Bundle        Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@index([bundleId], map: "BundleCollection_bundleId_fkey")
}

model BundleGlobalWrap {
  id                   String               @id
  bundleId             String
  wrapId               String
  Bundle               Bundle               @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  GlobalWrappingOption GlobalWrappingOption @relation(fields: [wrapId], references: [id], onDelete: Cascade)

  @@unique([bundleId, wrapId])
  @@index([wrapId], map: "BundleGlobalWrap_wrapId_fkey")
}

model BundleProduct {
  id           String  @id
  bundleId     String
  productGid   String
  variantGid   String?
  variantTitle String?
  imageUrl     String?
  priceCents   Int?
  min          Int     @default(0)
  max          Int     @default(0)
  variantsJson String?
  Bundle       Bundle  @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@index([bundleId], map: "BundleProduct_bundleId_fkey")
}

model BundleSale {
  id         String   @id
  shop       String
  bundleId   String
  wrappingId String?
  createdAt  DateTime @default(now())
}

model BundleTierPrice {
  id           String                      @id
  bundleId     String
  minQuantity  Int
  pricingType  BundleTierPrice_pricingType
  valueCents   Int?
  valuePercent Int?
  Bundle       Bundle                      @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@index([bundleId], map: "BundleTierPrice_bundleId_fkey")
}

model GlobalWrappingOption {
  id               String             @id
  shop             String
  name             String
  priceCents       Int                @default(0)
  imageUrl         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  BundleGlobalWrap BundleGlobalWrap[]
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model ShopSettings {
  shop            String            @id
  plan            ShopSettings_plan @default(FREE)
  widgetEnabled   Boolean           @default(true)
  languageJson    String?
  widgetPagesJson String?
  heroEnabled     Boolean?          @default(true)
  heroTitle       String?
  heroSubtitle    String?
  heroEmoji       String?
  heroColorStart  String?
  heroColorEnd    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
}

model ShopSubscription {
  shop           String    @id
  subscriptionId String?
  status         String?
  planName       String?
  trialEndsAt    DateTime?
  rawPayload     Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
}

model SupportMessage {
  id        String   @id
  shop      String
  message   String
  status    String   @default("NEW")
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model WrappingOption {
  id               String  @id
  bundleId         String
  name             String
  priceCents       Int     @default(0)
  imageUrl         String?
  shopifyProductId String?
  shopifyVariantId String?
  Bundle           Bundle  @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@index([bundleId], map: "WrappingOption_bundleId_fkey")
}

enum ShopSettings_plan {
  FREE
  PRO
}

enum BundleTierPrice_pricingType {
  SUM
  FIXED
  DISCOUNT_PERCENT
  DISCOUNT_AMOUNT
}

enum Bundle_pricingType {
  SUM
  FIXED
  DISCOUNT_PERCENT
  DISCOUNT_AMOUNT
}

enum Bundle_status {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum Bundle_type {
  FIXED
  MIX_MATCH
  BUILD_A_BOX
}
